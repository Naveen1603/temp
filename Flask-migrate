from flask import Flask
from flask_migrate import Migrate
from flask_sqlalchemy import SQLAlchemy
from sqlalchemy import create_engine

# Initialize the Flask app
app = Flask(__name__)

# Set the database URI for the source Microsoft Access database
app.config['SQLALCHEMY_DATABASE_URI'] = 'access:///path/to/accessfile.accdb'

# Set the database URI for the target PostgreSQL database
app.config['SQLALCHEMY_BINDS'] = {
    'postgresql': 'postgresql://username:password@host/database'
}

# Initialize the SQLAlchemy and Flask-Migrate objects
db = SQLAlchemy(app)
migrate = Migrate(app, db)

# Connect to the Access database using pyodbc
access_engine = create_engine('access:///path/to/accessfile.accdb')
access_conn = access_engine.connect()

# Get the list of tables in the Access database
table_names = access_conn.execute("SELECT Name FROM MSysObjects WHERE Type=1 AND Flags=0")

# Iterate over the tables and migrate them to the PostgreSQL database
for table_name in table_names:
    # Create a SQLAlchemy model for the Access table
    class AccessTable(db.Model):
        __bind_key__ = 'access'
        __tablename__ = table_name[0]

        columns = access_conn.execute(f"SELECT TOP 1 * FROM [{table_name[0]}]").keys()
        columns_list = [db.Column(column_name, db.String) for column_name in columns]

        id = db.Column(db.Integer, primary_key=True)
        *columns_list,

    # Create a SQLAlchemy model for the PostgreSQL table with the same column names
    class PostgresTable(db.Model):
        __tablename__ = table_name[0]

        id = db.Column(db.Integer, primary_key=True)
        *columns_list,

    # Create a bind for the Access table to connect to the Microsoft Access database
    db.get_engine(app, 'access').dispose()
    db.create_engine(f"access:///path/to/accessfile.accdb?table={table_name[0]}", {}).connect()

    # Run the migration to transfer the schema and data from Access to PostgreSQL
    migrate.init_app(app, db)
    migrate.migrate()

# Close the database connections
access_conn.close()
db.session.close_all()
